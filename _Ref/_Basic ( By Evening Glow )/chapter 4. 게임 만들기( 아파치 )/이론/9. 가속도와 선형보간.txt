========================================================
@	가속도와 선형보간.
========================================================

----------------------
0.	개요
----------------------
	
	*	현재 헬기는 급발진 -> 급정지를 하므로 부자연스럽다.

	*	현실 세계의 헬기는 출발 -> 가속 -> 정속 -> 감속 -> 정지로 움직인다.

	*	헬기에 가속과 감속을 적용하기 위해 보간법을 사용한다.



----------------------
1.	보간법.
----------------------

	1.	정의
	
		-	목표치까지 순차적으로 조금씩 값을 변화시키는 것.

	2.	종류

		-	선형보간, 비선형 보간.

	3.	방식

		-	여러 프레임에 걸쳐 초기값에 일정한 증분을 누적시켜서 목표값이 되도록 함.

		-	증분을 어떤 값으로 하느냐에 따라 가속, 감속의 효과가 나타남.



----------------------
2.	실습
----------------------

	------------------
	1.	변수 추가

		-	보간법을 사용하려면 현재까지 보간된 값을 저장할 변수가 필요.

		-	float 타입, currentX, currentY, currentZ.

	------------------	
	2.	선형 보간을 위한 노드 구성.

		-	연산 결과를 벡터로 변환하기 전에 보간.

		-	선형보간, 회전 보간, 벡터 보간 등이 있음.

			-	FInterp To 노드 선택.

			-	보간은 여러프레임에 걸쳐 수행되는 작업이므로

				보간된 값은 변수에 저장해 두어야 그 이후 프레임에서 누적됨.

		-	FInterp To 노드

			-	선형 보간 노드.

			-	Interp Speed	:	보간 속도 ( 증분 )

									이 값이 클수록 목표값에 빨리 가까워짐.

		-	전후 이동 적용.
		
			[ BP_Apache ] 블프 확인

	------------------
	3.	함수 만들기

		-	좌우 / 상하 이동, 회전에도 보간이 필요하므로 보간 기능을 함수로 만든다.

			1.	함수를 추가하고 이름은 MyLinearInterp 로 한다.

			2.	매개변수	:	키 입력		( Axis Value )
		
								현재 값		( Current Value )
							
								속도		( Speed )

				리턴값		:	보간 결과.	( Return Value )
					
				-	[ 디테일 / 입력 ]에서 매개변수와 리턴값을 추가한다.


		-	좌우, 상하 이동 적용.
		
			[ BP_Apache ] 블프 확인.

	------------------	
	4.	액터 회전.

		1.	회전 속도 보간을 위한 변수 추가.

			-	z축을 중심으로 회전하므로 Yaw 회전.

			-	float 타입으로 currentYaw 추가.

		
		2.	이벤트 그래프 작성.

			-	이동과 큰 차이는 없음.

				-	MakeVector -> MakeRotator 노드.

					AddActorLocalOffset -> AddActorLocalRotation 노드.

	------------------		

	5.	액터 회전시 화면 기울이기.

		0.	개요.

			-	헬기 회전시 화면이 좌우로 기울어지는 기능 추가.

			-	게임 화면을 좌우로 기울이는 것은 스프링 암을 x축 회전( Roll 회전 )시켜 처리.

			-	키를 누르고 있는 동안에만 화면이 기울어지고 키를 놓으면 원래의 수평위치로 복귀.

		

		1.	변수 추가.

			-	스프링 암이 회전할 각도를 저장할 변수를 3개 추가한다.

				sprArmYaw, sprArmPitch, sprArmRoll ( z, y, x )

		
		
		2.	화면 회전과 복원.

			-	처리 과정.

				1)	액터 회전 -> 스프링 암 회전.

					-	스프링 암의 Yaw은 액터의 Yaw 와 항상 같음.

				2)	키 입력 값은 ( -1, 0, 1 ) 중 하나이다.

					이 값을 회전 각도로 적용해서 스프링 암의 회전각도 ( Roll, x축 )로 설정.

					이렇게 하면 키 입력이 있을 경우에만 회전 각도가 적용( 1, -1 )되고 

					키 입력이 없으면 복원된다.( 0 )

				3)	화면이 갑자기 기울어지거나 복원되지 않도록
				
					선형보간 함수( MyLinearInterp )를 사용한다.


			-	설명.

				-	스프링암의 Roll 회전은( armRoll )은 키보드 입력 값에 -1500을 곱하여 만든다.

					-	음수를 곱하는 이유는 헬기의 회전방향( yaw )과 스프링 암이 회전하는 방향( roll )이

						서로 반대이기 때문.

				-	스프링 암은 액터의 방향과 관계없이 회전량이 일정하므로 월드 좌표( SetworldRotation )로

					하며, 충돌 이벤트가 없으므로 sweep 옵션을 사용하든 안하든 결과는 같다.

				
				-	선형보간 함수( MyLinearInterp )는 Speed (-1500) 값에 World Delta Seconds( 이전 프레임과의 시간 차 )를
					
					곱하고 있음.

					예)
					
						1)	fps가 100인 경우 World Delta Seconds는 평균 0.01초

							->	1500 * 0.01 = 15 도.

						2)	fps가 60인 경우 World Delta Seconds는 평균 0.17초

							->	1500 * 0.17 = 약 25도.

					-> 기기의 성능에 따라 회전량이 달라지는 문제 발생.

						해결)	회전량의 하한과 상항을 일정 수치로 제한.

								-> Clamp노드 사용.

				-	추후 마우스를 상하좌우로 이동하여 게임화면의 화각을 바꾸는 기능을 추가할 것임.

					->	armPitch, armYaw 미리 적용.

					->	armPitch : 마우스 상하 드래그.

						armYaw : 키보드에 의한 액터 회전 or 마우스 좌우 드래그.

	------------------